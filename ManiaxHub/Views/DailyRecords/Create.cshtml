@model ManiaxHub.Models.DailyRecord

@{
    // Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create";

}


<script type="text/javascript">
    $(document).ready(function () {
        $("#CustomerID").focus();
        $("#txtRecordDate").datepicker('setDate', 'today');
        $("#txtRecordDate").datepicker({
            dateFormat: 'dd-M-yy',
        });
        //$("#txtTotalAmount").attr("disabled", true);
        $("#txtStartingTime").timepicker({
            'noneOption': false,
            'interval': 15,
            'showDuration': true
        });
        //$("#txtEndingTime").timepicker({
        //    noneOption: false,
        //    interval: 15,
        //    showDuration: true
        //});
        $("#txtTotalAmount").val(0);
        $("#txtBalance").val(0);
        $("#txtDebit").val(0);
        $("#txtCoins").val(0);
        $("#txtFood").val(0);
        $("#txtCredit").val(0);

        //... show old credit ...
        
        $(document).ready(function () {
            $("#CustomerID").change(function () {
                
                //var value = $('select#CustomerID option:selected').val();
                var value1 = $('#CustomerID').val();
                 
                //var value2 = ($('#CustomerID :selected').text());
                //console.log(value1)
                //console.log(value2)
                //var CustomerID = JSON.stringify(value1);
                $.ajax({
                    type: "Get",
                    url: "/DailyRecords/GetCredit",
                    data: { id: value1 },
                    success: function (data) {
                        
                        var cr = data[0].Credit;;
                        if (cr != 0) {
                            
                            $("#txtCredit").val(cr);
                        } else {
                            
                            $("#txtCredit").val(0);
                        }
                    },
                    dataType: 'json'
                });

                //$("#CustomerID").val()
                //$("#txtCredit").val()
            });
        });

        $("#txtCoins").change(function () {
            
            var Coins = $("#txtCoins").val();
            var Food = $("#txtFood").val();
            var Balance = $("#txtBalance").val();
            var cr = $("#txtCredit").val();
            var CoinsAmount = parseInt(parseInt(Coins) * 4);

            if (Coins != "" && Coins != null && Food != "" && Food != null) {
                var TotalAmount = (CoinsAmount + parseInt(Food));
                $("#txtTotalAmount").val(TotalAmount);
            } else if (Food != "" && Food != null) {
                $("#txtCoins").val(0);
                var Coins = $("#txtCoins").val();
                var CoinsAmount = parseInt(parseInt(Coins) * 4);
                var Food = $("#txtFood").val();
                $("#txtTotalAmount").val((CoinsAmount) + parseInt(Food));
                //$("#txtTotalAmount").val(TotalAmount);
            } else {
                $("#txtCoins").val(0);
                $("#txtFood").val(0);
                var Food = $("#txtFood").val();
                $("#txtTotalAmount").val(Food);

                   }
            var TotalAmount = $("#txtTotalAmount").val();
            var Balance = $("#txtBalance").val();
            var Credit = ((parseInt(TotalAmount)) - (parseInt(Balance)));
            $("#txtCredit").val((parseInt(cr)) + (parseInt(Credit)));
        });

        $("#txtFood").change(function () {
            
            var Food = $("#txtFood").val();
            var cr = $("#txtCredit").val();
            var TotalAmount = $("#txtTotalAmount").val();
            var Coins = $("#txtCoins").val();
            var CoinsAmount = parseInt(parseInt(Coins) * 4);
            if (Food != "" && Food != null) {
                $("#txtTotalAmount").val((parseInt(CoinsAmount)) + (parseInt(Food)));
                var Balance = $("#txtBalance").val();
                var TotalAmount = $("#txtTotalAmount").val();
                var Credit = ((parseInt(TotalAmount)) - (parseInt(Balance)));
                $("#txtCredit").val(((parseInt(cr)) - (parseInt(CoinsAmount))) + (parseInt(Credit)));
            } else {
                $("#txtFood").val(0);
                var Coins = $("#txtCoins").val();
                var CoinsAmount = parseInt(parseInt(Coins) * 4);
                $("#txtTotalAmount").val(CoinsAmount);
                var TotalAmount = $("#txtTotalAmount").val();
                var Balance = $("#txtBalance").val();
                var Credit = ((parseInt(TotalAmount)) - (parseInt(Balance)));
                $("#txtCredit").val(((parseInt(cr)) - (parseInt(CoinsAmount))) + (parseInt(Credit)));
               // $("#txtCredit").val((parseInt(cr)) + (parseInt(Credit)));

            }
        });

        //$("#txtEndingTime").focusout(function () {
        //    
        //    var start_time = $("#txtStartingTime").val();
        //    var end_time = $("#txtEndingTime").val();
        //    //var diff = (new Date("1970-1-1 " + end_time) - new Date("1970-1-1 " + start_time)) / 1000;
        //    //diff /= 60;
        //    //var min = Math.abs(Math.round(diff));

        //    // code for calculating hours
        //    var diff = (new Date("1970-1-1 " + end_time) - new Date("1970-1-1 " + start_time)) / 1000 / 60;
        //    var TimeAmount = parseFloat(diff) * parseFloat(250 / 60);
        //    var TotalAmount = $("#txtTotalAmount").val();
        //    $("#txtTotalAmount").val((parseInt(TimeAmount)) + (parseInt(TotalAmount)));
        //});
        


        $("#txtBalance").change(function () {
            
            var cr = $("#txtCredit").val();
            //var TotalAmount = $("#txtTotalAmount").val();
            var Balance = $("#txtBalance").val();
            var Credit = ((parseInt(cr)) - (parseInt(Balance)));
            $("#txtCredit").val((parseInt(Credit)));
        });

        $('#setStartTimeButton').on('click', function () {
            $('#txtStartingTime').timepicker('setTime', new Date());
        });

        //$('#setEndTimeButton').on('click', function () {
        //    $('#txtEndingTime').timepicker('setTime', new Date());
        //    
        //    var start_time = $("#txtStartingTime").val();
        //    var end_time = $("#txtEndingTime").val();
        //    //var diff = (new Date("1970-1-1 " + end_time) - new Date("1970-1-1 " + start_time)) / 1000;
        //    //diff /= 60;
        //    //var min = Math.abs(Math.round(diff));

        //    // code for calculating hours
        //    var diff = (new Date("1970-1-1 " + end_time) - new Date("1970-1-1 " + start_time)) / 1000 / 60;
        //    var TimeAmount = parseFloat(diff) * parseFloat(250 / 60);
        //    var TotalAmount = $("#txtTotalAmount").val();
        //    $("#txtTotalAmount").val((parseInt(TimeAmount)) + (parseInt(TotalAmount)));
        //});

        //$("#txtCoins").focusout(function () {
        //    
        //    var Coins = $("#txtCoins").val();
        //    var TotalAmount = $("#txtTotalAmount").val();
        //    var CoinsAmount = parseInt(parseInt(Coins) * 4);
        //    if (Coins != "" && Coins != null) {
        //        $("#txtTotalAmount").val(CoinsAmount);
        //    } else {
        //        $("#txtTotalAmount").val(TotalAmount);
        //    }
        //});

        //$("#txtFood").focusout(function () {
        //    
        //    var Food = $("#txtFood").val();
        //    var TotalAmount = $("#txtTotalAmount").val();
        //    if (Food != "" && Food != null) {
        //        $("#txtTotalAmount").val((parseInt(TotalAmount)) + (parseInt(Food)));
        //    } else {
        //        $("#txtTotalAmount").val(TotalAmount);
        //    }
        //});

        //$("#txtBalance").focusout(function () {
        //    
        //    var TotalAmount = $("#txtTotalAmount").val();
        //    var Balance = $("#txtBalance").val();
        //    var Credit = ((parseInt(TotalAmount)) - (parseInt(Balance)));
        //    $("#txtCredit").val(Credit);
        //});


        //$("#txtTotalAmount").focusin(function () {
        //    
        //    var Coins = $("#txtCoins").val();
        //    var Food = $("#txtFood").val();
        //    var CoinsAmount = parseInt(parseInt(Coins) * 4);

        //    if (Coins != "" && Coins != null && Food != "" && Food != null) {
        //        $("#txtTotalAmount").val(CoinsAmount + (parseInt(Food)));
        //    } else if (Coins != "" && Coins != null) {
        //        $("#txtTotalAmount").val(CoinsAmount);
        //    } else if (Food != "" && Food != null) {
        //        $("#txtTotalAmount").val((parseInt(Food)));
        //    } else {
        //        $("#txtTotalAmount").val(0);
        //           }             
           
        //});
        
       
    });
</script>
<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>DailyRecord</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerID, "CustomerID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerID", null, htmlAttributes: new { @class = "form-control" , @id = "CustomerID" })
                @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecordDate, htmlAttributes: new { @class = "control-label col-md-2"  })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecordDate, new { htmlAttributes = new { @class = "form-control datepicker", @id = "txtRecordDate", @readonly = "true" , @Value = ViewBag.RecordDate } })
                @Html.ValidationMessageFor(model => model.RecordDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Coins, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Coins, new { htmlAttributes = new { @class = "form-control" , @autocomplete = "off", @id = "txtCoins" } })
                @Html.ValidationMessageFor(model => model.Coins, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Food, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Food, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "txtFood" } })
                @Html.ValidationMessageFor(model => model.Food, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartingTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartingTime, new { htmlAttributes = new { @class = "form-control timepicker", @id = "txtStartingTime", @autocomplete = "off", @readonly = true } })
                @Html.ValidationMessageFor(model => model.StartingTime, "", new { @class = "text-danger" })
                <div>
                    <input type="button" value="Set Starting Time" id="setStartTimeButton"/>
                </div>
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.EndingTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndingTime, new { htmlAttributes = new { @class = "form-control timepicker", @id = "txtEndingTime", @autocomplete = "off", @disabled = true } })
                @Html.ValidationMessageFor(model => model.EndingTime, "", new { @class = "text-danger" })
                <div>
                    <input type="button" value="Set Ending Time" id="setEndTimeButton" />
                </div>
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "txtTotalAmount", @readonly = true } })
                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Balance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Balance, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "txtBalance" } })
                @Html.ValidationMessageFor(model => model.Balance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Credit, htmlAttributes: new { @class = "control-label col-md-2"  })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Credit, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "txtCredit", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Credit, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Debit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Debit, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @id = "txtDebit" , @readonly = true , @value = ViewBag.Debit } })
                @Html.ValidationMessageFor(model => model.Debit, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
